/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package graphicaleditor.connection;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-11")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BENCHMARK_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("benchmark_result", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRACEFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("tracefile", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultTupleSchemeFactory());
  }

  /**
   * 
   * @see StatusCode
   */
  public StatusCode status; // required
  public String benchmark_result; // required
  public ByteBuffer tracefile; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatusCode
     */
    STATUS((short)1, "status"),
    BENCHMARK_RESULT((short)2, "benchmark_result"),
    TRACEFILE((short)3, "tracefile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // BENCHMARK_RESULT
          return BENCHMARK_RESULT;
        case 3: // TRACEFILE
          return TRACEFILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TRACEFILE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatusCode.class)));
    tmpMap.put(_Fields.BENCHMARK_RESULT, new org.apache.thrift.meta_data.FieldMetaData("benchmark_result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACEFILE, new org.apache.thrift.meta_data.FieldMetaData("tracefile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    StatusCode status,
    String benchmark_result)
  {
    this();
    this.status = status;
    this.benchmark_result = benchmark_result;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetBenchmark_result()) {
      this.benchmark_result = other.benchmark_result;
    }
    if (other.isSetTracefile()) {
      this.tracefile = org.apache.thrift.TBaseHelper.copyBinary(other.tracefile);
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.benchmark_result = null;
    this.tracefile = null;
  }

  /**
   * 
   * @see StatusCode
   */
  public StatusCode getStatus() {
    return this.status;
  }

  /**
   * 
   * @see StatusCode
   */
  public Result setStatus(StatusCode status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getBenchmark_result() {
    return this.benchmark_result;
  }

  public Result setBenchmark_result(String benchmark_result) {
    this.benchmark_result = benchmark_result;
    return this;
  }

  public void unsetBenchmark_result() {
    this.benchmark_result = null;
  }

  /** Returns true if field benchmark_result is set (has been assigned a value) and false otherwise */
  public boolean isSetBenchmark_result() {
    return this.benchmark_result != null;
  }

  public void setBenchmark_resultIsSet(boolean value) {
    if (!value) {
      this.benchmark_result = null;
    }
  }

  public byte[] getTracefile() {
    setTracefile(org.apache.thrift.TBaseHelper.rightSize(tracefile));
    return tracefile == null ? null : tracefile.array();
  }

  public ByteBuffer bufferForTracefile() {
    return org.apache.thrift.TBaseHelper.copyBinary(tracefile);
  }

  public Result setTracefile(byte[] tracefile) {
    this.tracefile = tracefile == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(tracefile, tracefile.length));
    return this;
  }

  public Result setTracefile(ByteBuffer tracefile) {
    this.tracefile = org.apache.thrift.TBaseHelper.copyBinary(tracefile);
    return this;
  }

  public void unsetTracefile() {
    this.tracefile = null;
  }

  /** Returns true if field tracefile is set (has been assigned a value) and false otherwise */
  public boolean isSetTracefile() {
    return this.tracefile != null;
  }

  public void setTracefileIsSet(boolean value) {
    if (!value) {
      this.tracefile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((StatusCode)value);
      }
      break;

    case BENCHMARK_RESULT:
      if (value == null) {
        unsetBenchmark_result();
      } else {
        setBenchmark_result((String)value);
      }
      break;

    case TRACEFILE:
      if (value == null) {
        unsetTracefile();
      } else {
        setTracefile((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case BENCHMARK_RESULT:
      return getBenchmark_result();

    case TRACEFILE:
      return getTracefile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case BENCHMARK_RESULT:
      return isSetBenchmark_result();
    case TRACEFILE:
      return isSetTracefile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_benchmark_result = true && this.isSetBenchmark_result();
    boolean that_present_benchmark_result = true && that.isSetBenchmark_result();
    if (this_present_benchmark_result || that_present_benchmark_result) {
      if (!(this_present_benchmark_result && that_present_benchmark_result))
        return false;
      if (!this.benchmark_result.equals(that.benchmark_result))
        return false;
    }

    boolean this_present_tracefile = true && this.isSetTracefile();
    boolean that_present_tracefile = true && that.isSetTracefile();
    if (this_present_tracefile || that_present_tracefile) {
      if (!(this_present_tracefile && that_present_tracefile))
        return false;
      if (!this.tracefile.equals(that.tracefile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_benchmark_result = true && (isSetBenchmark_result());
    list.add(present_benchmark_result);
    if (present_benchmark_result)
      list.add(benchmark_result);

    boolean present_tracefile = true && (isSetTracefile());
    list.add(present_tracefile);
    if (present_tracefile)
      list.add(tracefile);

    return list.hashCode();
  }

  @Override
  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBenchmark_result()).compareTo(other.isSetBenchmark_result());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBenchmark_result()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.benchmark_result, other.benchmark_result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTracefile()).compareTo(other.isSetTracefile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracefile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracefile, other.tracefile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Result(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("benchmark_result:");
    if (this.benchmark_result == null) {
      sb.append("null");
    } else {
      sb.append(this.benchmark_result);
    }
    first = false;
    if (isSetTracefile()) {
      if (!first) sb.append(", ");
      sb.append("tracefile:");
      if (this.tracefile == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.tracefile, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = graphicaleditor.connection.StatusCode.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BENCHMARK_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.benchmark_result = iprot.readString();
              struct.setBenchmark_resultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACEFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracefile = iprot.readBinary();
              struct.setTracefileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.benchmark_result != null) {
        oprot.writeFieldBegin(BENCHMARK_RESULT_FIELD_DESC);
        oprot.writeString(struct.benchmark_result);
        oprot.writeFieldEnd();
      }
      if (struct.tracefile != null) {
        if (struct.isSetTracefile()) {
          oprot.writeFieldBegin(TRACEFILE_FIELD_DESC);
          oprot.writeBinary(struct.tracefile);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetBenchmark_result()) {
        optionals.set(1);
      }
      if (struct.isSetTracefile()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetBenchmark_result()) {
        oprot.writeString(struct.benchmark_result);
      }
      if (struct.isSetTracefile()) {
        oprot.writeBinary(struct.tracefile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = graphicaleditor.connection.StatusCode.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.benchmark_result = iprot.readString();
        struct.setBenchmark_resultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tracefile = iprot.readBinary();
        struct.setTracefileIsSet(true);
      }
    }
  }

}

